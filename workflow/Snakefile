import functools
import pandas as pd

metadata = pd.read_csv("metadata/runs.csv")


def list_hdf5_datasets_Nt(metadata, Nt):
    return [
        f"{dataset.Nt}x{dataset.Nl}_{dataset.replicas}replicas"
        for dataset in metadata.itertuples()
        if dataset.Nt == Nt
    ]


def list_hdf5_datasets(metadata):
    return [
        f"{dataset.Nt}x{dataset.Nl}_{dataset.replicas}replicas"
        for dataset in metadata.itertuples()
    ]


@functools.cache
def parse_skip(skip):
    if skip == "[]":
        return []
    return list(map(int, skip.strip("[]").split(",")))


def input_logs(wildcards):
    Nt = int(wildcards.Nt)
    return [
        f"{dataset.runs}/{repeat_index}/Rep_{replica_index}/out_0"
        for dataset in metadata.itertuples()
        if dataset.Nt == Nt
        for repeat_index in range(dataset.repeats)
        for replica_index in range(dataset.replicas)
        if repeat_index not in parse_skip(dataset.skip)
    ]


rule all:
    input:
        definitions="assets/definitions/definitions.tex",
        overview_plots=expand(
            "assets/plots/overview/{dataset}.pdf", dataset=list_hdf5_datasets(metadata)
        ),
        an_trajectory_plots=expand(
            "assets/plots/an_trajectories/{dataset}.pdf",
            dataset=list_hdf5_datasets(metadata),
        ),
        free_energy_plots_Nt4=expand(
            "assets/plots/free_energy/{dataset}.pdf",
            dataset=list_hdf5_datasets_Nt(metadata, 4),
        ),
        free_energy_plots_Nt5=expand(
            "assets/plots/free_energy/{dataset}.pdf",
            dataset=list_hdf5_datasets_Nt(metadata, 5),
        ),
        an_volume_plots=expand("assets/plots/an_volume_Nt{Nt}.pdf", Nt=[4, 5, 6]),
        entropy_plots=expand("assets/plots/entropy_Nt{Nt}.pdf", Nt=[4, 5]),
        critical_beta=expand("data_assets/critical_beta_Nt{Nt}.csv", Nt=[4, 5]),
        critical_beta_cumulants=expand(
            "data_assets/critical_beta_cumulants_Nt{Nt}.csv", Nt=[4, 5]
        ),
        critical_beta_two_to_one=expand(
            "data_assets/critical_beta_2:1_Nt{Nt}.csv", Nt=[4, 5]
        ),
        critical_beta_one_to_two=expand(
            "data_assets/critical_beta_1:2_Nt{Nt}.csv", Nt=[4, 5]
        ),
        critical_beta_volume_plots=expand(
            "assets/plots/critical_beta_volumes_Nt{Nt}.pdf", Nt=[4, 5]
        ),
        double_gaussian_volume_plots=expand(
            "assets/plots/plaquette_distribution_Nt{Nt}_volumes.pdf", Nt=[4, 5]
        ),
        double_gaussian_plots_Nt4=expand(
            "assets/plots/plaquette_distribution/{dataset}.pdf",
            dataset=list_hdf5_datasets_Nt(metadata, 4),
        ),
        double_gaussian_plots_Nt5=expand(
            "assets/plots/plaquette_distribution/{dataset}.pdf",
            dataset=list_hdf5_datasets_Nt(metadata, 5),
        ),
        double_gaussian_plots_Nt4_2_to_1=expand(
            "assets/plots/plaquette_distribution/{dataset}_two_to_one.pdf",
            dataset=list_hdf5_datasets_Nt(metadata, 4),
        ),
        double_gaussian_plots_Nt5_2_to_1=expand(
            "assets/plots/plaquette_distribution/{dataset}_two_to_one.pdf",
            dataset=list_hdf5_datasets_Nt(metadata, 5),
        ),
        double_gaussian_plots_Nt4_1_to_2=expand(
            "assets/plots/plaquette_distribution/{dataset}_one_to_two.pdf",
            dataset=list_hdf5_datasets_Nt(metadata, 4),
        ),
        double_gaussian_plots_Nt5_1_to_2=expand(
            "assets/plots/plaquette_distribution/{dataset}_one_to_two.pdf",
            dataset=list_hdf5_datasets_Nt(metadata, 5),
        ),
        an_replica_plots=expand(
            "assets/plots/an_replicas_Nt{Nt}_Nl{Nl}.pdf",
            zip,
            Nt=[5, 5, 6],
            Nl=[48, 56, 72],
        ),
        plot_binder_cumulant=expand(
            "assets/plots/binder_cumulant_Nt{Nt}.pdf", Nt=[4, 5]
        ),
        plot_specific_heat=expand("assets/plots/specific_heat_Nt{Nt}.pdf", Nt=[4, 5]),
        surface_tension_plot="assets/plots/surface_tension_term.pdf",
        ensembles_combined="assets/tables/runs.tex",
        file_out="assets/tables/beta_critical.tex",


rule julia_instantiate:
    input:
        script="scripts/instantiate.jl",
    output:
        julia_instantiated="tmp/julia_ready",
    conda:
        "envs/environment.yml"
    shell:
        "julia {input.script} && touch {output.julia_instantiated}"


rule parse_hdf5:
    input:
        #logs=input_logs,
        script="scripts/parse_llr.jl",
        julia_instantiated="tmp/julia_ready",
        metadata="metadata/runs.csv",
    output:
        h5file="tmp/Sp4_Nt{Nt}.hdf5",
    conda:
        "envs/environment.yml"
    shell:
        'julia --project="." {input.script} --h5file_unsorted {output.h5file} --metadata {input.metadata} --Nt {wildcards.Nt}'


rule sort_hdf5:
    input:
        script="scripts/sort_an.jl",
        h5file="tmp/Sp4_Nt{Nt}.hdf5",
        julia_instantiated="tmp/julia_ready",
    output:
        h5file="data_assets/Sp4_Nt{Nt}_sorted.hdf5",
    conda:
        "envs/environment.yml"
    shell:
        'julia --project="." {input.script} --h5file_unsorted {input.h5file} --h5file {output.h5file}'


rule tables:
    input:
        script="scripts/tables.jl",
        h5file="data_assets/Sp4_Nt{Nt}_sorted.hdf5",
        julia_instantiated="tmp/julia_ready",
    output:
        table="tmp/tables/runs_Nt{Nt}.tex",
    conda:
        "envs/environment.yml"
    shell:
        'julia --project="." {input.script} --h5file {input.h5file} --outfile {output.table}'


rule overview_plots:
    input:
        h5file="data_assets/Sp4_Nt{Nt}_sorted.hdf5",
        script="scripts/trajectory_overview.jl",
        julia_instantiated="tmp/julia_ready",
    output:
        plot="assets/plots/overview/{Nt}x{Nl}_{Nreplicas}replicas.pdf",
    conda:
        "envs/environment.yml"
    shell:
        'julia --project="." {input.script} --h5file {input.h5file} --plot_file {output.plot} --run_name {wildcards.Nt}x{wildcards.Nl}_{wildcards.Nreplicas}replicas'


rule an_trajectory_plots:
    input:
        h5file="data_assets/Sp4_Nt{Nt}_sorted.hdf5",
        script="scripts/an_history.jl",
        julia_instantiated="tmp/julia_ready",
    output:
        plot="assets/plots/an_trajectories/{Nt}x{Nl}_{Nreplicas}replicas.pdf",
    conda:
        "envs/environment.yml"
    shell:
        'julia --project="." {input.script} --h5file {input.h5file} --plot_file {output.plot} --run_name {wildcards.Nt}x{wildcards.Nl}_{wildcards.Nreplicas}replicas'


rule free_energy_plots:
    input:
        h5file="data_assets/Sp4_Nt{Nt}_sorted.hdf5",
        script="scripts/free_energy.jl",
        julia_instantiated="tmp/julia_ready",
    output:
        plot="assets/plots/free_energy/{Nt}x{Nl}_{Nreplicas}replicas.pdf",
    conda:
        "envs/environment.yml"
    shell:
        'julia --project="." {input.script} --h5file {input.h5file} --plot_file {output.plot} --run_name {wildcards.Nt}x{wildcards.Nl}_{wildcards.Nreplicas}replicas'


rule an_volume_comparison_plots:
    input:
        h5file="data_assets/Sp4_Nt{Nt}_sorted.hdf5",
        script="scripts/compare_volumes.jl",
        julia_instantiated="tmp/julia_ready",
    output:
        plot="assets/plots/an_volume_Nt{Nt}.pdf",
    conda:
        "envs/environment.yml"
    shell:
        r'julia --project="." {input.script} --h5file {input.h5file} --plot_file {output.plot} --title "\$N_t={wildcards.Nt}\$"'


rule an_replica_comparison_plots:
    input:
        h5file="data_assets/Sp4_Nt{Nt}_sorted.hdf5",
        script="scripts/compare_replicas.jl",
        julia_instantiated="tmp/julia_ready",
    output:
        plot="assets/plots/an_replicas_Nt{Nt}_Nl{Nl}.pdf",
    conda:
        "envs/environment.yml"
    shell:
        'julia --project="." {input.script} --h5file {input.h5file} --plot_file {output.plot} --Nt {wildcards.Nt} --Nl {wildcards.Nl}'


rule entropy_plots:
    input:
        h5file="data_assets/Sp4_Nt{Nt}_sorted.hdf5",
        script="scripts/entropy.jl",
        julia_instantiated="tmp/julia_ready",
    output:
        plot="assets/plots/entropy_Nt{Nt}.pdf",
    conda:
        "envs/environment.yml"
    shell:
        'julia --project="." {input.script} --h5file {input.h5file} --plot_file {output.plot}'


rule critical_beta:
    input:
        h5file="data_assets/Sp4_Nt{Nt}_sorted.hdf5",
        script="scripts/critical_beta.jl",
        julia_instantiated="tmp/julia_ready",
    output:
        csv="data_assets/critical_beta_Nt{Nt}.csv",
    conda:
        "envs/environment.yml"
    shell:
        'julia --project="." {input.script} --h5file {input.h5file} --outfile {output.csv}'


rule critical_cumulant:
    input:
        h5file="data_assets/Sp4_Nt{Nt}_sorted.hdf5",
        script="scripts/critical_cumulants.jl",
        julia_instantiated="tmp/julia_ready",
    output:
        csv="data_assets/critical_beta_cumulants_Nt{Nt}.csv",
    conda:
        "envs/environment.yml"
    shell:
        'julia --project="." {input.script} --h5file {input.h5file} --outfile {output.csv}'


rule critical_beta_two_to_one:
    input:
        h5file="data_assets/Sp4_Nt{Nt}_sorted.hdf5",
        script="scripts/critical_beta.jl",
        julia_instantiated="tmp/julia_ready",
    output:
        csv="data_assets/critical_beta_2:1_Nt{Nt}.csv",
    conda:
        "envs/environment.yml"
    shell:
        'julia --project="." {input.script} --h5file {input.h5file} --outfile {output.csv} --peak1 2'


rule critical_beta_one_to_two:
    input:
        h5file="data_assets/Sp4_Nt{Nt}_sorted.hdf5",
        script="scripts/critical_beta.jl",
        julia_instantiated="tmp/julia_ready",
    output:
        csv="data_assets/critical_beta_1:2_Nt{Nt}.csv",
    conda:
        "envs/environment.yml"
    shell:
        'julia --project="." {input.script} --h5file {input.h5file} --outfile {output.csv} --peak1 1 --peak2 2'


rule double_gaussian_volume_plots:
    input:
        h5file="data_assets/Sp4_Nt{Nt}_sorted.hdf5",
        script="scripts/double_gaussian_volumes.jl",
        julia_instantiated="tmp/julia_ready",
    output:
        plot="assets/plots/plaquette_distribution_Nt{Nt}_volumes.pdf",
    conda:
        "envs/environment.yml"
    shell:
        r'julia --project="." {input.script} --h5file {input.h5file} --plotfile {output.plot} --title "\$N_t={wildcards.Nt}\$"'


rule critical_beta_volume_plots:
    input:
        script="scripts/plot_beta.jl",
        critical_beta="data_assets/critical_beta_Nt{Nt}.csv",
        critical_beta_two_to_one="data_assets/critical_beta_2:1_Nt{Nt}.csv",
        critical_beta_one_to_two="data_assets/critical_beta_1:2_Nt{Nt}.csv",
        julia_instantiated="tmp/julia_ready",
    output:
        plot="assets/plots/critical_beta_volumes_Nt{Nt}.pdf",
    conda:
        "envs/environment.yml"
    shell:
        'julia --project="." {input.script} --plotfile {output.plot} {input.critical_beta} {input.critical_beta_two_to_one} {input.critical_beta_one_to_two}'


rule double_gaussian_plots:
    input:
        h5file="data_assets/Sp4_Nt{Nt}_sorted.hdf5",
        script="scripts/double_gaussian_fit.jl",
        julia_instantiated="tmp/julia_ready",
    output:
        plot="assets/plots/plaquette_distribution/{Nt}x{Nl}_{Nreplicas}replicas.pdf",
    conda:
        "envs/environment.yml"
    shell:
        'julia --project="." {input.script} --h5file {input.h5file} --plot_file {output.plot} --run_name {wildcards.Nt}x{wildcards.Nl}_{wildcards.Nreplicas}replicas'


rule double_gaussian_plots_two_to_one:
    input:
        h5file="data_assets/Sp4_Nt{Nt}_sorted.hdf5",
        script="scripts/double_gaussian_fit.jl",
        julia_instantiated="tmp/julia_ready",
    output:
        plot="assets/plots/plaquette_distribution/{Nt}x{Nl}_{Nreplicas}replicas_two_to_one.pdf",
    conda:
        "envs/environment.yml"
    shell:
        'julia --project="." {input.script} --h5file {input.h5file} --plot_file {output.plot} --peak1 2 --run_name {wildcards.Nt}x{wildcards.Nl}_{wildcards.Nreplicas}replicas'


rule double_gaussian_plots_one_to_two:
    input:
        h5file="data_assets/Sp4_Nt{Nt}_sorted.hdf5",
        script="scripts/double_gaussian_fit.jl",
        julia_instantiated="tmp/julia_ready",
    output:
        plot="assets/plots/plaquette_distribution/{Nt}x{Nl}_{Nreplicas}replicas_one_to_two.pdf",
    conda:
        "envs/environment.yml"
    shell:
        'julia --project="." {input.script} --h5file {input.h5file} --plot_file {output.plot} --peak2 2 --run_name {wildcards.Nt}x{wildcards.Nl}_{wildcards.Nreplicas}replicas'


rule cumulant_plots:
    input:
        h5file="data_assets/Sp4_Nt{Nt}_sorted.hdf5",
        script="scripts/plot_cumulants.jl",
        julia_instantiated="tmp/julia_ready",
        csv="data_assets/critical_beta_cumulants_Nt{Nt}.csv",
    output:
        plot_binder_cumulant="assets/plots/binder_cumulant_Nt{Nt}.pdf",
        plot_specific_heat="assets/plots/specific_heat_Nt{Nt}.pdf",
    conda:
        "envs/environment.yml"
    threads: workflow.cores / 2
    shell:
        'julia --threads {threads} --project="." {input.script} --h5file {input.h5file} --critical_values {input.csv} --plot_file_binder_cumulant {output.plot_binder_cumulant} --plot_file_specific_heat {output.plot_specific_heat} --Nt {wildcards.Nt}'


rule surface_tension_plot:
    input:
        script="scripts/surface_tension_term.jl",
        h5file_Nt4="data_assets/Sp4_Nt4_sorted.hdf5",
        h5file_Nt5="data_assets/Sp4_Nt5_sorted.hdf5",
        julia_instantiated="tmp/julia_ready",
    output:
        plot="assets/plots/surface_tension_term.pdf",
    conda:
        "envs/environment.yml"
    shell:
        'julia --project="." {input.script} --plotfile {output.plot} {input.h5file_Nt4} {input.h5file_Nt5}'


rule critical_beta_table:
    input:
        script="scripts/tex_critical_beta.jl",
        csv_cumulant="data_assets/critical_beta_cumulants_Nt{Nt}.csv",
        csv_histogram="data_assets/critical_beta_Nt{Nt}.csv",
        julia_instantiated="tmp/julia_ready",
    output:
        textable="tmp/tables/beta_critical_Nt{Nt}.tex",
    conda:
        "envs/environment.yml"
    shell:
        'julia --project="." {input.script} --tex_file {output.textable} --input_cumulants {input.csv_cumulant} --input_histogram {input.csv_histogram} '


rule definitions:
    input:
        script="scripts/definitions.jl",
        h5file_Nt4="tmp/Sp4_Nt4.hdf5",
        h5file_Nt5="tmp/Sp4_Nt5.hdf5",
        julia_instantiated="tmp/julia_ready",
    output:
        definitions="assets/definitions/definitions.tex",
    conda:
        "envs/environment.yml"
    shell:
        'julia --project="." {input.script} --outfile {output.definitions} --h5file_Nt4 {input.h5file_Nt4} --h5file_Nt5 {input.h5file_Nt5} '


rule combine_ensemble_tables:
    input:
        script="scripts/combine_tables.jl",
        file1="tmp/tables/runs_Nt5.tex",
        file2="tmp/tables/runs_Nt4.tex",
        julia_instantiated="tmp/julia_ready",
    output:
        file_out="assets/tables/runs.tex",
    conda:
        "envs/environment.yml"
    shell:
        'julia --project="." {input.script} --outfile {output.file_out} --file1 {input.file1} --file2 {input.file2}'


rule combine_critical_beta_tables:
    input:
        script="scripts/combine_tables.jl",
        file1="tmp/tables/beta_critical_Nt5.tex",
        file2="tmp/tables/beta_critical_Nt4.tex",
        julia_instantiated="tmp/julia_ready",
    output:
        file_out="assets/tables/beta_critical.tex",
    conda:
        "envs/environment.yml"
    shell:
        'julia --project="." {input.script} --outfile {output.file_out} --file1 {input.file1} --file2 {input.file2}'
